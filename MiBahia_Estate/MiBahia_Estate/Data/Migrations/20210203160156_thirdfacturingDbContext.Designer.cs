// <auto-generated />
using System;
using MiBahia_Estate;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MiBahia_Estate.Data.Migrations
{
    [DbContext(typeof(bahia_estateContext))]
    [Migration("20210203160156_thirdfacturingDbContext")]
    partial class thirdfacturingDbContext
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("MiBahia_Estate.CoinType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<string>("Type")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("CoinType");
                });

            modelBuilder.Entity("MiBahia_Estate.Property", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<decimal?>("Area")
                        .IsRequired()
                        .HasColumnType("decimal(13,2)")
                        .HasColumnName("area");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("description");

                    b.Property<bool?>("Outstanding")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("outstanding")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("PropertyTypeId")
                        .HasColumnType("int")
                        .HasColumnName("PropertyTypeID");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("PropertyTypeId");

                    b.ToTable("Property");
                });

            modelBuilder.Entity("MiBahia_Estate.PropertyAddresses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)")
                        .HasColumnName("Address");

                    b.Property<int?>("PropertyId")
                        .HasColumnType("int")
                        .HasColumnName("propertyid");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyAddress");
                });

            modelBuilder.Entity("MiBahia_Estate.PropertyPhotos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<string>("PhotoPath")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("photopath");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int")
                        .HasColumnName("propertyid");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyPhotos");
                });

            modelBuilder.Entity("MiBahia_Estate.PropertyPrice", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<int>("CoinId")
                        .HasColumnType("int")
                        .HasColumnName("CoinId");

                    b.Property<int>("Price")
                        .HasColumnType("int")
                        .HasColumnName("price");

                    b.Property<string>("PriceNotes")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("priceNotes");

                    b.HasKey("Id");

                    b.ToTable("PropertyPrice");
                });

            modelBuilder.Entity("MiBahia_Estate.PropertyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<string>("Type")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("PropertyType");
                });

            modelBuilder.Entity("MiBahia_Estate.House", b =>
                {
                    b.HasBaseType("MiBahia_Estate.Property");

                    b.Property<int?>("Bathrooms")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("bathrooms");

                    b.Property<bool?>("Gym")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("Gym")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("Rooms")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("rooms");

                    b.Property<bool?>("ServiceRoom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("serviceRoom")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("WashingArea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("washingArea")
                        .HasDefaultValueSql("((0))");

                    b.ToTable("House");
                });

            modelBuilder.Entity("MiBahia_Estate.Solares.BuildingSite", b =>
                {
                    b.HasBaseType("MiBahia_Estate.Property");

                    b.Property<decimal>("PricePerMeter")
                        .HasColumnType("decimal(13,2)")
                        .HasColumnName("pricePerMeter");

                    b.ToTable("BuildingSite");
                });

            modelBuilder.Entity("MiBahia_Estate.Property", b =>
                {
                    b.HasOne("MiBahia_Estate.PropertyType", "PropertyType")
                        .WithMany("Properties")
                        .HasForeignKey("PropertyTypeId")
                        .HasConstraintName("Inmueble_TipoInmueble_fk")
                        .IsRequired();

                    b.Navigation("PropertyType");
                });

            modelBuilder.Entity("MiBahia_Estate.PropertyAddresses", b =>
                {
                    b.HasOne("MiBahia_Estate.Property", "Property")
                        .WithMany("PropertyAddresses")
                        .HasForeignKey("PropertyId")
                        .HasConstraintName("PropertyAddress_fk");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("MiBahia_Estate.PropertyPhotos", b =>
                {
                    b.HasOne("MiBahia_Estate.Property", "Property")
                        .WithMany("PropertyPhotos")
                        .HasForeignKey("PropertyId")
                        .HasConstraintName("PropertyPhotos_fk")
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("MiBahia_Estate.PropertyPrice", b =>
                {
                    b.HasOne("MiBahia_Estate.Property", "IdNavigation")
                        .WithOne("PropertyPrice")
                        .HasForeignKey("MiBahia_Estate.PropertyPrice", "Id")
                        .HasConstraintName("PropertyPrice_fk")
                        .IsRequired();

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("MiBahia_Estate.House", b =>
                {
                    b.HasOne("MiBahia_Estate.Property", "IdNavigation")
                        .WithOne("House")
                        .HasForeignKey("MiBahia_Estate.House", "Id")
                        .HasConstraintName("Property_House_fk")
                        .IsRequired();

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("MiBahia_Estate.Solares.BuildingSite", b =>
                {
                    b.HasOne("MiBahia_Estate.Property", "IdNavigation")
                        .WithOne("BuildingSite")
                        .HasForeignKey("MiBahia_Estate.Solares.BuildingSite", "Id")
                        .HasConstraintName("Property_BuildingSite_fk")
                        .IsRequired();

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("MiBahia_Estate.Property", b =>
                {
                    b.Navigation("BuildingSite");

                    b.Navigation("House");

                    b.Navigation("PropertyAddresses");

                    b.Navigation("PropertyPhotos");

                    b.Navigation("PropertyPrice");
                });

            modelBuilder.Entity("MiBahia_Estate.PropertyType", b =>
                {
                    b.Navigation("Properties");
                });
#pragma warning restore 612, 618
        }
    }
}
